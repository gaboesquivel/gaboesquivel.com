<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>angular generator on Gabo Esquivel - Software Engineer</title>
    <link>https://gaboesquivel.com/tags/angular-generator/</link>
    <description>Recent content in angular generator on Gabo Esquivel - Software Engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Apr 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://gaboesquivel.com/tags/angular-generator/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overview of Angular Generators – April 2014</title>
      <link>https://gaboesquivel.com/blog/2014/overview-of-angular-generators-april-2014/</link>
      <pubDate>Sat, 19 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://gaboesquivel.com/blog/2014/overview-of-angular-generators-april-2014/</guid>
      <description>&lt;p&gt;This is a short and opinionated review of the AngularJS generators on npm as of April 19th, 2014.&lt;/p&gt;
&lt;p&gt;There are a lot of generators on npm and it&amp;rsquo;s a little hard to decide which one to use or fork, since we don&amp;rsquo;t want to reinvent the wheel. Currently the only way to compare them is to try them one by one and that&amp;rsquo;s a very time consuming task. In this post I&amp;rsquo;ll try to give you an overview of some generators I&amp;rsquo;ve explored recently hoping it will save you some time. I’ll follow &lt;a href=&#34;http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript&#34;&gt;Cliff Meyer&amp;rsquo;s Code Organization Categorization&lt;/a&gt; to describe their code structure.&lt;/p&gt;
&lt;p&gt;Most generators still use the &amp;ldquo;Sock Drawer&amp;rdquo; directory organization, an approach that I personally avoid, it doesn&amp;rsquo;t scale well but it works for small projects. I prefer a modular structure as suggested on latest &lt;a href=&#34;https://docs.google.com/document/d/1XXMvReO8-Awi1EZXAXS4PzDzdNvV6pGcuaF4Q9821Es/pub&#34;&gt;Google&amp;rsquo;s Best Practice Recommendations for Angular App Structure&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some of the benefits of modularization are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encapsulation:&lt;/strong&gt; Code, styles and tests related to specific feature will be contained on the same directory.&lt;br&gt;
&lt;strong&gt;Context:&lt;/strong&gt;  Code lives in given context by feature. This is specially important to developers new to the application, who will find it easier to connect the dots.&lt;br&gt;
&lt;strong&gt;Code Reusabilty:&lt;/strong&gt; You would be able to reuse modules across projects and clients, Eg mobile and web-client could share autentication modules or resources ( models ).&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a list of Angular generators and their characteristics (some of them are fullstack generators):&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
