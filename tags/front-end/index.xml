<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Front End on Gabo Esquivel - Software Engineer and Consultant</title>
    <link>/tags/front-end/index.xml</link>
    <description>Recent content in Front End on Gabo Esquivel - Software Engineer and Consultant</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/front-end/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>In-Place Editing with contenteditable and AngularJS</title>
      <link>/blog/2014/in-place-editing-with-contenteditable-and-angularjs/</link>
      <pubDate>Sat, 23 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/in-place-editing-with-contenteditable-and-angularjs/</guid>
      <description>&lt;p&gt;In-place editing provides an easy way to let the user edit parts of a page without having to be redirected to an edit page. Instead, the user can just click around on a page an edit the elements he or she wishes to change – without reloading the page. When the user hovers over an editable area, the background color of the element changes. When clicked, the text becomes editable.&lt;/p&gt;

&lt;p&gt;You can make an element editable by adding the contenteditable attribute in your markup. This attribute has three possible values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;inherit&lt;/code&gt;. Specifying inherit will make the element editable if it’s immediate parent is editable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;editable&amp;quot; contenteditable=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The following directive uses contenteditable attribute and ng-model for data binding.&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;452&#34; data-theme-id=&#34;8070&#34; data-slug-hash=&#34;mgCAG&#34; data-default-tab=&#34;result&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/gaboesquivel/pen/mgCAG/&#39;&gt;Editing Page Elements with contenteditable&lt;/a&gt; by Gabo Esquivel (&lt;a href=&#39;http://codepen.io/gaboesquivel&#39;&gt;@gaboesquivel&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;Current browser support for contenteditable. &lt;small&gt;source: &lt;a href=&#34;http://caniuse.com/#feat=contenteditable&#34;&gt;http://caniuse.com/#feat=contenteditable&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;div class=&#39;center-align-wrapper&#39;&gt;
    &lt;img src=&#39;/img/2014/08/caniuse-content-editable.jpg&#39; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Known issues&lt;/strong&gt;&lt;br /&gt;
- In Chromium/Chrome contenteditable cannot be edited when nested into draggable (&lt;a href=&#34;https://code.google.com/p/chromium/issues/detail?id=170139&#34;&gt;https://code.google.com/p/chromium/issues/detail?id=170139&lt;/a&gt;). Still not fixed in Chrome version 26.0.1384.2.&lt;br /&gt;
- In Firefox when clicking on contenteditable nested into draggable, cursor is always positioned to the start of editable text. Still not fixed in version 18.0.1.&lt;br /&gt;
- In Internet Explorer contenteditable cannot be applied to the TABLE, COL, COLGROUP, TBODY, TD, TFOOT, TH, THEAD, and TR elements directly, a content editable SPAN, or DIV element can be placed inside the individual table cells (See &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ie/ms533690(v=vs.85).aspx&#34;&gt;http://msdn.microsoft.com/en-us/library/ie/ms533690(v=vs.85).aspx&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;br /&gt;
- &lt;a href=&#34;http://www.w3.org/TR/html/editing.html#contenteditable&#34;&gt;w3.org contenteditable&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;http://ui-patterns.com/patterns/inplaceeditor&#34;&gt;UI Patterns - In Place Editor&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introduction to Gulp.js</title>
      <link>/blog/2014/introduction-to-gulp.js/</link>
      <pubDate>Sun, 20 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/introduction-to-gulp.js/</guid>
      <description>&lt;p&gt;Automation of repetitive and critical tasks is key to develop a successful software product. Automated tasks will minimize software cost, reduce software delivery time as well as improving the product quality and reduce human error. Investing time in automating tasks will allow you to focus on developing features.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“War is of vital importance to the state; hence it is a subject of inquiry which can on no account be neglected”&lt;/em&gt;&lt;br /&gt;
- Sun Tzu, Art of War&lt;/p&gt;

&lt;p&gt;In this post I will introduce you to Gulp.js, a javascript task runner that helps you automate your development process.&lt;/p&gt;

&lt;p&gt;##Setting Up your Web App Build System&lt;/p&gt;

&lt;p&gt;When developing modern web applications there are critical tasks you want to automate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;testing: code linting, unit testing, e2e tests&lt;/li&gt;
&lt;li&gt;css preprocessing ( sass, less, …)&lt;/li&gt;
&lt;li&gt;optimization: concatenating and minifying css and scripts, compressing new or modified images, &amp;hellip;&lt;/li&gt;
&lt;li&gt;deploying updates to a staging or production server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many tools that will help you automate these tasks. Which one to choose? Grunt, Gulp, Brunch, Broccoli,…&lt;/p&gt;

&lt;p&gt;Back in 2012 Grunt.js came out and it was quickly adopted by the community, plugins started to proliferate and it became king for task automation on the client side, playing well with Bower and Yeoman. Like many other developers I’ve been using Grunt on my projects and it gets the job done but recently I started to use Gulp, another open source project with faster build times and a Unix/Node philosophical approach to solve problems.&lt;/p&gt;

&lt;p&gt;Gulp.js focuses on code over configuration. By harnessing the power of Node streams, it enables faster build times by avoiding the need to write temporary files to disk. This is one of the main differences with Grunt. Stream instances are basically Unix pipes. They can be readable, writable or both and are easy to reason about &amp;ndash; you can pipe a readable stream to a writable stream by doing readableStream.pipe(writableStream).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Streams come to us from the earliest days of unix and have proven themselves over the decades as a dependable way to compose large systems out of small components that do one thing well.&lt;br /&gt;
You can then plug the output of one stream to the input of another and use libraries that operate abstractly on streams to institute higher-level flow control.”&lt;/em&gt;&lt;br /&gt;
- substack
&lt;/p&gt;

&lt;p&gt;Other advantages of using Gulp are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using standard libraries to accomplish tasks&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Small, idiomatic Node modules that do one thing well&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Tasks are executed with maximum concurrency&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Really simple and elegant API&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learning the new flow control techniques will make you more efficient. To learn more about node streams read the &lt;a href=&#34;https://github.com/substack/stream-handbook&#34;&gt;Stream Handbook&lt;/a&gt; by James Halliday and play on the &lt;a href=&#34;http://nodestreams.com&#34;&gt;Node.js Stream Playground&lt;/a&gt; by John Resig. Another great resource is &lt;a href=&#34;http://maxogden.com/node-streams.html&#34;&gt;Node Streams: How do they work?&lt;/a&gt; by Max Ogden, it comes with a screencast version of the article.&lt;/p&gt;

&lt;p&gt;Gulp has only few functions to learn:&lt;br /&gt;
&lt;strong&gt;task(name, fn)&lt;/strong&gt; : it registers the function and you can optionally specify some dependencies if other tasks need to run first.&lt;br /&gt;
&lt;strong&gt;run(tasks&amp;hellip;)&lt;/strong&gt; : runs all tasks with maximum concurrency.&lt;br /&gt;
&lt;strong&gt;watch(glob, fn)&lt;/strong&gt; : runs a function when a file that matches the glob changes&lt;br /&gt;
&lt;strong&gt;src(glob)&lt;/strong&gt; :  returns a readable stream. Takes a file system glob and starts emitting files that match. This is piped to other streams.&lt;br /&gt;
&lt;strong&gt;dest(folder)&lt;/strong&gt; : returns a writable stream. File objects piped to this are saved to the file system.&lt;/p&gt;

&lt;p&gt;This article will walk you through all of the intimidating stuff and introduce you to the core ideas that you will need to know to start using gulp. &lt;a href=&#34;http://travismaynard.com/writing/getting-started-with-gulp&#34;&gt;http://travismaynard.com/writing/getting-started-with-gulp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a Javascript Jabber episode with the creator of Gulp: &lt;a href=&#34;http://javascriptjabber.com/097-jsj-gulp-js-with-eric-schoffstall&#34;&gt;JSJ Gulp.js with Eric Schoffstall&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Caveats: the Gulp.js team is working on bringing in a new task system to improve efficiency ( even more ) and it might include some API changes, you can follow the progress here &lt;a href=&#34;https://github.com/gulpjs/gulp/issues/355&#34;&gt;https://github.com/gulpjs/gulp/issues/355&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##So why should I use Gulp instead of Grunt?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/markdalgleish&#34;&gt;Mark Dalgleish&lt;/a&gt; published a great presentation that covers the history of Grunt and Gulp and their differences: &lt;a href=&#34;http://markdalgleish.github.io/presentation-build-wars-gulp-vs-grunt&#34;&gt;http://markdalgleish.github.io/presentation-build-wars-gulp-vs-grunt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another great article that is worth reading is &lt;a href=&#34;http://blog.ponyfoo.com/2014/01/09/gulp-grunt-whatever&#34;&gt;Gulp, Grunt, Whatever..&lt;/a&gt; by &lt;a href=&#34;http://twitter.com/nzgb&#34;&gt;Nicolas Bevacqua&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main reasons why I decided to switch to Gulp are:&lt;br /&gt;
- Grunt uses JSON-like data configuration files; Gulp uses leaner, simpler JavaScript code.&lt;br /&gt;
- Grunt plugins often perform multiple tasks; Gulp plugins are designed to do one thing only.&lt;br /&gt;
- Grunt requires plug-ns for basic functionality such as file watching; Gulp has them built-in.&lt;/p&gt;

&lt;p&gt;You can find gulp plugins at &lt;a href=&#34;http://gulpjs.com/plugins&#34;&gt;http://gulpjs.com/plugins&lt;/a&gt; and &lt;a href=&#34;https://npmjs.org/browse/keyword/gulpplugin&#34;&gt;https://npmjs.org/browse/keyword/gulpplugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##Conclusion&lt;/p&gt;

&lt;p&gt;Gulp.js and node streams are more natural to understand than a huge config file and it also provides more flexibility and speed. Grunt is more mature. I think that both Grunt and Gulp can happily co-exist, If you are using it successfully, there’s no reason to switch Gulp unless you really want or need more flow control and you feel comfortable working with streams and living on the edge.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Overview of Angular Generators – April 2014</title>
      <link>/blog/2014/overview-of-angular-generators--april-2014/</link>
      <pubDate>Sat, 19 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/overview-of-angular-generators--april-2014/</guid>
      <description>&lt;p&gt;This is a short and opinionated review of the AngularJS generators on npm as of April 19th, 2014.&lt;/p&gt;

&lt;p&gt;There are a lot of generators on npm and it&amp;rsquo;s a little hard to decide which one to use or fork, since we don&amp;rsquo;t want to reinvent the wheel. Currently the only way to compare them is to try them one by one and that&amp;rsquo;s a very time consuming task. In this post I&amp;rsquo;ll try to give you an overview of some generators I&amp;rsquo;ve explored recently hoping it will save you some time. I’ll follow &lt;a href=&#34;http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript&#34;&gt;Cliff Meyer&amp;rsquo;s Code Organization Categorization&lt;/a&gt; to describe their code structure.&lt;/p&gt;

&lt;p&gt;Most generators still use the &amp;ldquo;Sock Drawer&amp;rdquo; directory organization, an approach that I personally avoid, it doesn&amp;rsquo;t scale well but it works for small projects. I prefer a modular structure as suggested on latest &lt;a href=&#34;https://docs.google.com/document/d/1XXMvReO8-Awi1EZXAXS4PzDzdNvV6pGcuaF4Q9821Es/pub&#34;&gt;Google&amp;rsquo;s Best Practice Recommendations for Angular App Structure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of the benefits of modularization are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Encapsulation:&lt;/strong&gt; Code, styles and tests related to specific feature will be contained on the same directory.&lt;br /&gt;
&lt;strong&gt;Context:&lt;/strong&gt;  Code lives in given context by feature. This is specially important to developers new to the application, who will find it easier to connect the dots.&lt;br /&gt;
&lt;strong&gt;Code Reusabilty:&lt;/strong&gt; You would be able to reuse modules across projects and clients, Eg mobile and web-client could share autentication modules or resources ( models ).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a list of Angular generators and their characteristics (some of them are fullstack generators):
&lt;/p&gt;

&lt;p&gt;##generator-angular v0.8.0&lt;/p&gt;

&lt;p&gt;The angular generator maintained by the yeoman members. It generates all the boilerplate you need to get started and has subgenerators to scaffold the different angular object types. The app generator also optionally installs Bootstrap and additional AngularJS modules.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;build system&lt;/strong&gt;: grunt&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code organization&lt;/strong&gt;: sock drawer&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;subgenerators&lt;/strong&gt;: angular controllers, directives, filters, routes, services, providers, factories, values, constants, decorators and views. &lt;code&gt;--coffee&lt;/code&gt; flag in case you prefer to use CoffeeScript&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependency mgr&lt;/strong&gt;: bower&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testing&lt;/strong&gt;: karma for unit and E2E tests&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css preprocessors&lt;/strong&gt;: optional sass with compass&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deployment&lt;/strong&gt;:  false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optimization&lt;/strong&gt;: true&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;continuous integration&lt;/strong&gt;: travis&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;live reload&lt;/strong&gt;: true&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;source_maps&lt;/strong&gt;: false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modules&lt;/strong&gt;: optional angular-resource, angular-cookies, angular-sanitize, angular-route. not optional angular-mocks,angular-scenario&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code linting&lt;/strong&gt;: jshint src and tests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;goodies&lt;/strong&gt;: autoprefixer, editorconfig, cache buster&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;optional Twitter Bootstrap&lt;/li&gt;
&lt;li&gt;by default, new scripts are added to the index.html file. optional &lt;code&gt;--skip-add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;automatically runs &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;bower install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;static node server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;maintained by &lt;a href=&#34;https://github.com/yeoman/generator-angular/graphs/contributors&#34;&gt;Yeoman Members&lt;/a&gt;&lt;br /&gt;
npm: &lt;a href=&#34;https://www.npmjs.org/package/generator-angular&#34;&gt;https://www.npmjs.org/package/generator-angular&lt;/a&gt;&lt;br /&gt;
github: &lt;a href=&#34;https://github.com/yeoman/generator-angular&#34;&gt;https://github.com/yeoman/generator-angular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##generator-angular-fullstack v1.4.2&lt;/p&gt;

&lt;p&gt;Yeoman generator for creating MEAN stack applications: MongoDB, Express, AngularJS, and Node. It is based on generator-angular,it also has subgenerators to scaffold the different angular object types and it optionally installs Bootstrap, additional AngularJS modules and MongoDB integration with Mongoose.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;build system&lt;/strong&gt;: grunt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code organization&lt;/strong&gt;: sock drawer&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;subgenerators&lt;/strong&gt;: angularjs subgenerators for controllers, directives, filters, routes, services, providers, factories, values, constants, decorators and views. And a fullstack subgenerator for deployment.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependency mgr&lt;/strong&gt;:  bower&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testing&lt;/strong&gt;:  karma for unit and E2E tests&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css preprocessors&lt;/strong&gt;: optional sass with compass&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deployment&lt;/strong&gt;:   easy deployment workflow. OpenShift, Heroku, custom&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optimization&lt;/strong&gt;: true&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;continuous integration&lt;/strong&gt;:   travis&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;live reload&lt;/strong&gt;: client and server files&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;source_maps&lt;/strong&gt;: false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modules&lt;/strong&gt;: optional angular-resource, angular-cookies, angular-sanitize, angular-route. not optional angular-mocks, angular-scenario&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code linting&lt;/strong&gt;: jshint src and tests&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;goodies&lt;/strong&gt;: autoprefixer, cdnify&lt;/li&gt;
&lt;li&gt;optional Twitter Bootstrap&lt;/li&gt;
&lt;li&gt;optional MongoDB integration with Mongoose&lt;/li&gt;
&lt;li&gt;support for Jade and CoffeeScript&lt;/li&gt;
&lt;li&gt;optional Passport integration for adding user accounts&lt;/li&gt;
&lt;li&gt;express server integrated with grunt tasks&lt;/li&gt;
&lt;li&gt;autorun &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;bower install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;by default, new scripts are added to the index.html file. optional &amp;ndash;skip-add&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;maintained by &lt;a href=&#34;https://github.com/DaftMonk&#34;&gt;daftmonk&lt;/a&gt;&lt;br /&gt;
npm: &lt;a href=&#34;https://www.npmjs.org/package/generator-angular-fullstack&#34;&gt;https://www.npmjs.org/package/generator-angular-fullstack&lt;/a&gt;&lt;br /&gt;
github: &lt;a href=&#34;https://github.com/DaftMonk/generator-angular-fullstack&#34;&gt;https://github.com/DaftMonk/generator-angular-fullstack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##generator-cg-angular v3.0.3&lt;/p&gt;

&lt;p&gt;A generator for large applications. Organize code however the developer wishes. All subgenerators prompt the user for the directory to place the created files. Fully supports Angular&amp;rsquo;s Best Practice Guidelines for app structure.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;build system&lt;/strong&gt;: supports grunt and gulp&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code organization&lt;/strong&gt;: In v3.0, all subgenerators for partials, services, directives, and filters, allow the user to specify where to save the new files, thus you can create your own directory structure (including nesting) as you desire.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;subgenerators&lt;/strong&gt;: angularjs subgenerators for directives, partials, service, filters and modules&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependency mgr&lt;/strong&gt;:  bower&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testing&lt;/strong&gt;:  grunt-contrib-jasmine, Headless testing with Jasmine, PhantomJS&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css preprocessors&lt;/strong&gt;: Less&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deployment&lt;/strong&gt;: false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optimization&lt;/strong&gt;: true&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;continuous integration&lt;/strong&gt;: false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;live reload&lt;/strong&gt;: true&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;source_maps&lt;/strong&gt;: false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modules&lt;/strong&gt;: optional ui-router. not optional angular-animate, angular-resource, angular-cookies, angular-mocks, angular-ui-utils, angular-bootstrap&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code linting&lt;/strong&gt;: jshint src and tests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;goodies&lt;/strong&gt;: editorconfig&lt;/li&gt;
&lt;li&gt;appName prompt&lt;/li&gt;
&lt;li&gt;autorun &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;bower install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;maintained by &lt;a href=&#34;https://github.com/cgross&#34;&gt;cgross&lt;/a&gt;&lt;br /&gt;
npm: &lt;a href=&#34;https://www.npmjs.org/package/generator-cg-angular&#34;&gt;https://www.npmjs.org/package/generator-cg-angular&lt;/a&gt;&lt;br /&gt;
github:  &lt;a href=&#34;https://github.com/cgross/generator-cg-angular&#34;&gt;https://github.com/cgross/generator-cg-angular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##generator-boom v0.1.8&lt;/p&gt;

&lt;p&gt;Boom uses Gulp instead of Grunt, Protractor (E2E tests) and BrowserSync is pre-configured. Good Stuff!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;build system&lt;/strong&gt;: gulp&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code organization&lt;/strong&gt;: Sock Drawer code organization by default&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;subgenerators&lt;/strong&gt;: angularjs subgenerators for controllers, directives, filters, routes, services, providers, factories, values, constants, decorators and views. Constants and Values will be added in main.js (No new file will be created). Adding Routes will also create and link the css and controller in their respective folders. Subgenerators for fonts, styles and views and tests.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependency mgr&lt;/strong&gt;: bower&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testing&lt;/strong&gt;:  Protractor (E2E tests) pre-configured&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css preprocessors&lt;/strong&gt;: sass&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deployment&lt;/strong&gt;:   false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optimization&lt;/strong&gt;:  true&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;continuous integration&lt;/strong&gt;: false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;live reload&lt;/strong&gt;: true&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;source_maps&lt;/strong&gt;: false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modules&lt;/strong&gt;: optional angular-resource, angular-cookies, angular-sanitize, angular-route, angular-animate, angular-ui(ui-utils, bootstrap, ui-router, ng-grid)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code linting&lt;/strong&gt;: jshint src and tests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;goodies&lt;/strong&gt;: editorconfig, browsersync pre-configured&lt;/li&gt;
&lt;li&gt;development and production code are separated&lt;/li&gt;
&lt;li&gt;optional jquery or zepto&lt;/li&gt;
&lt;li&gt;optional modernizr&lt;/li&gt;
&lt;li&gt;FontFace - Add @fontface on fly&lt;/li&gt;
&lt;li&gt;Share code with client using command gulp zip (Will create the .zip file of build folder)&lt;/li&gt;
&lt;li&gt;static node server&lt;/li&gt;
&lt;li&gt;autorun &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;bower install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;maintained by &lt;a href=&#34;https://github.com/aamirshah&#34;&gt;aamirshah&lt;/a&gt;&lt;br /&gt;
npm: &lt;a href=&#34;https://www.npmjs.org/package/generator-boom&#34;&gt;https://www.npmjs.org/package/generator-boom&lt;/a&gt;&lt;br /&gt;
github: &lt;a href=&#34;https://github.com/aamirshah/generator-boom&#34;&gt;https://github.com/aamirshah/generator-boom&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##generator-meanjs v0.0.8&lt;/p&gt;

&lt;p&gt;MEAN.JS is a full-stack JavaScript solution, which provides a solid starting point for MongoDB, Node.js, Express, and AngularJS based applications. The idea is to solve the common issues with connecting those frameworks, build a robust framework to support daily development needs, and help developers use better practices while working with popular JavaScript components.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;build system&lt;/strong&gt;: grunt&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code organization&lt;/strong&gt;: modular&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;subgenerators&lt;/strong&gt;: Subgenerators for Angular and Express: crud-module, angular-module, angular-route, angular-controller, angular-view, angular-service, angular-directive, angular-filter, angular-config, angular-test, express-model, express-controller, express-route, express-test&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependency mgr&lt;/strong&gt;: bower&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testing&lt;/strong&gt;:  unit tests with karma&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css preprocessors&lt;/strong&gt;: false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deployment&lt;/strong&gt;: false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optimization&lt;/strong&gt;: false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;continuous integration&lt;/strong&gt;: travis&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;live reload&lt;/strong&gt;: true&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;source_maps&lt;/strong&gt;: false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modules&lt;/strong&gt;: optional angular-resource, angular-cookies, angular-sanitize, angular-route, angular-touch, article crud. not optional angular-mocks&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code linting&lt;/strong&gt;: jshint src and tests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;goodies&lt;/strong&gt;: procfile&lt;/li&gt;
&lt;li&gt;appName, description and author prompts&lt;/li&gt;
&lt;li&gt;autorun &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;bower install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;maintained by &lt;a href=&#34;https://github.com/amoshaviv&#34;&gt;amoshaviv&lt;/a&gt;&lt;br /&gt;
npm: &lt;a href=&#34;https://www.npmjs.org/package/generator-meanjs&#34;&gt;https://www.npmjs.org/package/generator-meanjs&lt;/a&gt;&lt;br /&gt;
github: &lt;a href=&#34;https://github.com/meanjs/generator-meanjs&#34;&gt;https://github.com/meanjs/generator-meanjs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the explanation about Mean.js and Mean.io - &lt;a href=&#34;http://tmblr.co/Z7XDmo17TG_o4&#34;&gt;http://tmblr.co/Z7XDmo17TG_o4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##generator-hyper-angular v0.1.6&lt;/p&gt;

&lt;p&gt;HyperAngular (generator-hyper-angular) is a Yeoman generator for AngularJS/Express/node.js apps emphasizing modularity, configuration, and testing. It&amp;rsquo;s designed to provide plenty of tooling to help you code expressively at all scales, while putting up railings to keep your code consistent and clean. It stamps out a simple application that tests itself and self-documents the structure of the generated template&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;build system&lt;/strong&gt;:  grunt&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code organization&lt;/strong&gt;: sock drawer&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;subgenerators&lt;/strong&gt;: false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependency mgr&lt;/strong&gt;: bower&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testing&lt;/strong&gt;:  unit test with karma and e2e with protractor&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css preprocessors&lt;/strong&gt;: less&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deployment&lt;/strong&gt;: false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optimization&lt;/strong&gt;: true&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;continuous integration&lt;/strong&gt;:  travis&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;live reload&lt;/strong&gt;: true&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;source_maps&lt;/strong&gt;: false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modules&lt;/strong&gt;: optional angular-ui-router. not optional angular-resource, angular-mocks&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code linting&lt;/strong&gt;: jshint src and tests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;goodies&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;appName prompt&lt;/li&gt;
&lt;li&gt;prompts for protocol, host and port&lt;/li&gt;
&lt;li&gt;prompt for Github user and License&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;autorun &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;bower install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;maintained by &lt;a href=&#34;https://github.com/jprystowsky&#34;&gt;jprystowsky&lt;/a&gt;&lt;br /&gt;
npm: &lt;a href=&#34;https://www.npmjs.org/package/generator-hyper-angular&#34;&gt;https://www.npmjs.org/package/generator-hyper-angular&lt;/a&gt;&lt;br /&gt;
github: &lt;a href=&#34;https://github.com/jprystowsky/generator-hyper-angular&#34;&gt;https://github.com/jprystowsky/generator-hyper-angular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##slush-angular v0.3.0&lt;/p&gt;

&lt;p&gt;A slush generator for AngularJS using the Google Angular App Structure Recommendations.
This is not a yeoman generator, it is built with &lt;a href=&#34;https://github.com/klei/slush&#34;&gt;slush&lt;/a&gt; a gulp based alternative to yeoman. You can choose between LESS, Stylus, and Sass to use as the CSS Preprocessor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;build system&lt;/strong&gt;: gulp&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code organization&lt;/strong&gt;: modular&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;subgenerators&lt;/strong&gt;: false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependency mgr&lt;/strong&gt;: bower&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testing&lt;/strong&gt;: unit tests with karma&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css preprocessors&lt;/strong&gt;: Stylus, Less, Sass&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deployment&lt;/strong&gt;:  false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optimization&lt;/strong&gt;: true&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;continuous integration&lt;/strong&gt;: false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;live reload&lt;/strong&gt;: true&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;source_maps&lt;/strong&gt;: false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modules&lt;/strong&gt;: not optional angular-route, angular-route&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code linting&lt;/strong&gt;: jshint src and tests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;goodies&lt;/strong&gt;: optional todoList example, csslint, editorconfig, lazypipe&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;appName prompt&lt;/li&gt;
&lt;li&gt;autorun &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;bower install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;maintained by:  &lt;a href=&#34;https://github.com/joakimbeng&#34;&gt;joakimbeng&lt;/a&gt;&lt;br /&gt;
npm : &lt;a href=&#34;https://www.npmjs.org/package/slush-angular&#34;&gt;https://www.npmjs.org/package/slush-angular&lt;/a&gt;&lt;br /&gt;
github: &lt;a href=&#34;https://github.com/klei/slush-angular&#34;&gt;https://github.com/klei/slush-angular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##generator-ngbp v0.0.5&lt;/p&gt;

&lt;p&gt;Yeoman generator based on the &lt;a href=&#34;https://github.com/ngbp/ngbp&#34;&gt;ngBoilerplate kickstarter&lt;/a&gt;, a best-practice boilerplate for scalable Angular projects built on a highly modular, folder-by-feature structure.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;build system&lt;/strong&gt;: grunt&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code organization&lt;/strong&gt;: modular&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;subgenerators&lt;/strong&gt;: only one subgenerator at the moment ngbp:module&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependency mgr&lt;/strong&gt;: bower&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testing&lt;/strong&gt;: unit tests with karma&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css preprocessors&lt;/strong&gt;: Less&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deployment&lt;/strong&gt;: false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optimization&lt;/strong&gt;: true&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;continuous integration&lt;/strong&gt;: false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;live reload&lt;/strong&gt;: true&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;source_maps&lt;/strong&gt;:  false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modules&lt;/strong&gt;: optional angular-resource. not optional angular-ui-router, angular-bootstrap, angular-mocks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code linting&lt;/strong&gt;: jshint src and tests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;goodies&lt;/strong&gt;: autoprefixer, editorconfig, cache buster&lt;/li&gt;
&lt;li&gt;appName prompt&lt;/li&gt;
&lt;li&gt;prompt for copyright in html&lt;/li&gt;
&lt;li&gt;coffeeScript support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;maintained by:  &lt;a href=&#34;https://github.com/thardy/generator-ngbp&#34;&gt;thardy&lt;/a&gt;&lt;br /&gt;
npm : &lt;a href=&#34;https://www.npmjs.org/package/generator-ngbp&#34;&gt;https://www.npmjs.org/package/generator-ngbp&lt;/a&gt;&lt;br /&gt;
github: &lt;a href=&#34;https://github.com/thardy/generator-ngbp&#34;&gt;https://github.com/thardy/generator-ngbp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##generator-gulp-ng v1.0.1&lt;/p&gt;

&lt;p&gt;This is a yeoman generator for an angularjs project that follows the Best Practice Recommendations for Angular App Structure. It takes advantage of the gulp build tool and makes use of bower and npm for dependency management.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;build system&lt;/strong&gt;: gulp&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code organization&lt;/strong&gt;: modular  *follows google&amp;rsquo;s best practices document&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;subgenerators&lt;/strong&gt;: no subgenerators&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependency mgr&lt;/strong&gt;: bower&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testing&lt;/strong&gt;: unit tests with karma&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css preprocessors&lt;/strong&gt;: false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deployment&lt;/strong&gt;: false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optimization&lt;/strong&gt;: true&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;continuous integration&lt;/strong&gt;: false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;live reload&lt;/strong&gt;: true&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;source_maps&lt;/strong&gt;:  false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modules&lt;/strong&gt;: not optional angular-route&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code linting&lt;/strong&gt;: jshint src and tests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;goodies&lt;/strong&gt;: template cache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;maintained by:  &lt;a href=&#34;https://github.com/henyojess&#34;&gt;henyojess&lt;/a&gt;&lt;br /&gt;
npm : &lt;a href=&#34;https://www.npmjs.org/package/generator-gulp-ng&#34;&gt;https://www.npmjs.org/package/generator-gulp-ng&lt;/a&gt;&lt;br /&gt;
github: &lt;a href=&#34;https://github.com/henyojess/generator-gulp-ng&#34;&gt;https://github.com/henyojess/generator-gulp-ng&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##generator-klei v0.4.3&lt;/p&gt;

&lt;p&gt;A Yeoman generator for generating module or app boilerplates! MEAN-stack (all parts optional) with scalability in mind and with Grunt and Bower sweetness.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;build system&lt;/strong&gt;: grunt&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code organization&lt;/strong&gt;: modular&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;subgenerators&lt;/strong&gt;: klei:api&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependency mgr&lt;/strong&gt;: bower&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testing&lt;/strong&gt;: unit tests with karma&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css preprocessors&lt;/strong&gt;: stylus&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deployment&lt;/strong&gt;: false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optimization&lt;/strong&gt;: true&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;continuous integration&lt;/strong&gt;: false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;live reload&lt;/strong&gt;: true&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;source_maps&lt;/strong&gt;:  false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modules&lt;/strong&gt;: not optional angular-route, angular-mocks, restangular&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code linting&lt;/strong&gt;: jshint src and tests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;goodies&lt;/strong&gt;: optional todo list example, editorconfig, csslint, template cache&lt;/li&gt;
&lt;li&gt;appName prompt&lt;/li&gt;
&lt;li&gt;optional REST API scaffolding with Express&lt;/li&gt;
&lt;li&gt;optional MongoDB with Mongoose&lt;/li&gt;
&lt;li&gt;autorun &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;bower install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;maintained by: &lt;a href=&#34;https://github.com/joakimbeng&#34;&gt;joakimbeng&lt;/a&gt;&lt;br /&gt;
npm : &lt;a href=&#34;https://www.npmjs.org/package/generator-klei&#34;&gt;https://www.npmjs.org/package/generator-klei&lt;/a&gt;&lt;br /&gt;
github: &lt;a href=&#34;https://github.com/klei-dev/generator-klei&#34;&gt;https://github.com/klei-dev/generator-klei&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more AngularJS generators go to @substack’s npmsearch.com and “type angular &amp;amp; yeoman-generator” or &lt;a href=&#34;http://npmsearch.com/?q=angular%20&amp;amp;%20yeoman-generator&#34;&gt;click here&lt;/a&gt;.&lt;br /&gt;
There&amp;rsquo;s also &lt;a href=&#34;http://yeoman.io/community-generators.html&#34;&gt;Yeoman Community Generators Search&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Forking! You may also want to &lt;a href=&#34;http://code.tutsplus.com/tutorials/build-your-own-yeoman-generator--cms-20040&#34;&gt;create your own yeoman generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I published this repo &lt;a href=&#34;https://github.com/gaboesquivel/angular-generators&#34;&gt;https://github.com/gaboesquivel/angular-generators&lt;/a&gt; to hold this information until we have a better way to search and filter generators. If you&amp;rsquo;d like update information of one of the generators listed or add a new one go ahead and PR.&lt;/p&gt;

&lt;p&gt;Please leave your comments. :)&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>