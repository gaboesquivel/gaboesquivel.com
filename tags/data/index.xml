<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data on Gabo Esquivel - Software Engineer and Consultant</title>
    <link>/tags/data/index.xml</link>
    <description>Recent content in Data on Gabo Esquivel - Software Engineer and Consultant</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/data/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Choosing the Data Store for Your Web App</title>
      <link>/blog/2013/choosing-the-data-store-for-your-web-app/</link>
      <pubDate>Tue, 03 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/choosing-the-data-store-for-your-web-app/</guid>
      <description>&lt;p&gt;When choosing a database for your application, you need ask yourself many questions and there are important rules about Data Architecture&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;there&amp;#8217;s no standard solution that fits all&lt;/li&gt;
&lt;li&gt;the business and it&amp;#8217;s data defines the architecture&lt;/li&gt;
&lt;li&gt;you need to find the right tool that does job&lt;/li&gt;
&lt;li&gt;you can use multiple databases, different types depending on the characteristics of each data subset&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is very important to decide carefully, after your application grown it could be very difficult to change. The CAP theorem, also known as Brewer&amp;#8217;s theorem, states that it is impossible for a distributed computer system to simultaneously provide all three of the following guarantees:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Consistency (all nodes see the same data at the same time)&lt;/li&gt;
&lt;li&gt;Availability (a guarantee that every request receives a response about whether it was successful or failed)&lt;/li&gt;
&lt;li&gt;Partition tolerance (the system continues to operate despite arbitrary message loss or failure of part of the system)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;center-align-wrapper&#34;&gt;
&lt;img  alt=&#34;CAP Theorem - Venn Diagram&#34; src=&#34;/img/2013/09/cap_venn.png&#34; width=&#34;547&#34; height=&#34;520&#34; /&gt;&lt;br /&gt;
&lt;/div&gt;
Once you have defined which of those guarantees is less important for your app and can be sacrificed, you have a smaller subset of options to choose from. However this not the only thing you need to consider, you may want to use a specific framework such as Hibernate, Spring, Django or WordPress, and take advantage of the of-the-shelf capabilities, in that case you want to use a SQL database.
&lt;/p&gt;

&lt;p&gt;Other questions that will help you decide which database works best:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is the data like? What&amp;rsquo;s the nature of it?&lt;/li&gt;
&lt;li&gt;How is the data updated?&lt;/li&gt;
&lt;li&gt;How is the data read?&lt;/li&gt;
&lt;li&gt;Do you need limited access permissions?&lt;/li&gt;
&lt;li&gt;How important is documentation and community support?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Micah Yoder explains it very well in &lt;a href=&#34;https://www.youtube.com/watch?t=13&amp;amp;v=1AisVHrWHJo&#34;&gt;this video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Data Architecture is not just about choosing the right data store, other aspects to analyze are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Low Cost ( preferably open source, no hidden costs&amp;#8230; )&lt;/li&gt;
&lt;li&gt;Simple to Implement and Scale&lt;/li&gt;
&lt;li&gt;Learning Curve&lt;/li&gt;
&lt;li&gt;Rapid Development&lt;/li&gt;
&lt;li&gt;Operational Maintenance&lt;/li&gt;
&lt;li&gt;Ability to Do Online Changes&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>