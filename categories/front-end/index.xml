<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>front-end on Gabo Esquivel - Software Developer</title>
    <link>https://gaboesquivel.com/categories/front-end/</link>
    <description>Recent content in front-end on Gabo Esquivel - Software Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Apr 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://gaboesquivel.com/categories/front-end/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to Gulp.js</title>
      <link>https://gaboesquivel.com/blog/2014/introduction-to-gulp.js/</link>
      <pubDate>Sun, 20 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://gaboesquivel.com/blog/2014/introduction-to-gulp.js/</guid>
      <description>&lt;p&gt;Automation of repetitive and critical tasks is key to develop a successful software product. Automated tasks will minimize software cost, reduce software delivery time as well as improving the product quality and reduce human error. Investing time in automating tasks will allow you to focus on developing features.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“War is of vital importance to the state; hence it is a subject of inquiry which can on no account be neglected”&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sun Tzu, Art of War&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post I will introduce you to Gulp.js, a javascript task runner that helps you automate your development process.&lt;/p&gt;
&lt;p&gt;##Setting Up your Web App Build System&lt;/p&gt;
&lt;p&gt;When developing modern web applications there are critical tasks you want to automate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;testing: code linting, unit testing, e2e tests&lt;/li&gt;
&lt;li&gt;css preprocessing ( sass, less, …)&lt;/li&gt;
&lt;li&gt;optimization: concatenating and minifying css and scripts, compressing new or modified images, &amp;hellip;&lt;/li&gt;
&lt;li&gt;deploying updates to a staging or production server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many tools that will help you automate these tasks. Which one to choose? Grunt, Gulp, Brunch, Broccoli,…&lt;/p&gt;
&lt;p&gt;Back in 2012 Grunt.js came out and it was quickly adopted by the community, plugins started to proliferate and it became king for task automation on the client side, playing well with Bower and Yeoman. Like many other developers I’ve been using Grunt on my projects and it gets the job done but recently I started to use Gulp, another open source project with faster build times and a Unix/Node philosophical approach to solve problems.&lt;/p&gt;
&lt;p&gt;Gulp.js focuses on code over configuration. By harnessing the power of Node streams, it enables faster build times by avoiding the need to write temporary files to disk. This is one of the main differences with Grunt. Stream instances are basically Unix pipes. They can be readable, writable or both and are easy to reason about &amp;ndash; you can pipe a readable stream to a writable stream by doing readableStream.pipe(writableStream).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Streams come to us from the earliest days of unix and have proven themselves over the decades as a dependable way to compose large systems out of small components that do one thing well.&lt;br&gt;
You can then plug the output of one stream to the input of another and use libraries that operate abstractly on streams to institute higher-level flow control.”&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;substack&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Overview of Angular Generators – April 2014</title>
      <link>https://gaboesquivel.com/blog/2014/overview-of-angular-generators-april-2014/</link>
      <pubDate>Sat, 19 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://gaboesquivel.com/blog/2014/overview-of-angular-generators-april-2014/</guid>
      <description>&lt;p&gt;This is a short and opinionated review of the AngularJS generators on npm as of April 19th, 2014.&lt;/p&gt;
&lt;p&gt;There are a lot of generators on npm and it&amp;rsquo;s a little hard to decide which one to use or fork, since we don&amp;rsquo;t want to reinvent the wheel. Currently the only way to compare them is to try them one by one and that&amp;rsquo;s a very time consuming task. In this post I&amp;rsquo;ll try to give you an overview of some generators I&amp;rsquo;ve explored recently hoping it will save you some time. I’ll follow &lt;a href=&#34;http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript&#34;&gt;Cliff Meyer&amp;rsquo;s Code Organization Categorization&lt;/a&gt; to describe their code structure.&lt;/p&gt;
&lt;p&gt;Most generators still use the &amp;ldquo;Sock Drawer&amp;rdquo; directory organization, an approach that I personally avoid, it doesn&amp;rsquo;t scale well but it works for small projects. I prefer a modular structure as suggested on latest &lt;a href=&#34;https://docs.google.com/document/d/1XXMvReO8-Awi1EZXAXS4PzDzdNvV6pGcuaF4Q9821Es/pub&#34;&gt;Google&amp;rsquo;s Best Practice Recommendations for Angular App Structure&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some of the benefits of modularization are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encapsulation:&lt;/strong&gt; Code, styles and tests related to specific feature will be contained on the same directory.&lt;br&gt;
&lt;strong&gt;Context:&lt;/strong&gt;  Code lives in given context by feature. This is specially important to developers new to the application, who will find it easier to connect the dots.&lt;br&gt;
&lt;strong&gt;Code Reusabilty:&lt;/strong&gt; You would be able to reuse modules across projects and clients, Eg mobile and web-client could share autentication modules or resources ( models ).&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a list of Angular generators and their characteristics (some of them are fullstack generators):&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
