<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>angularjs on Gabo Esquivel - Software Developer</title>
    <link>https://gaboesquivel.com/categories/angularjs/</link>
    <description>Recent content in angularjs on Gabo Esquivel - Software Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Aug 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://gaboesquivel.com/categories/angularjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>In-Place Editing with contenteditable and AngularJS</title>
      <link>https://gaboesquivel.com/blog/2014/in-place-editing-with-contenteditable-and-angularjs/</link>
      <pubDate>Sat, 23 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://gaboesquivel.com/blog/2014/in-place-editing-with-contenteditable-and-angularjs/</guid>
      <description>&lt;p&gt;In-place editing provides an easy way to let the user edit parts of a page without having to be redirected to an edit page. Instead, the user can just click around on a page an edit the elements he or she wishes to change – without reloading the page. When the user hovers over an editable area, the background color of the element changes. When clicked, the text becomes editable.&lt;/p&gt;
&lt;p&gt;You can make an element editable by adding the contenteditable attribute in your markup. This attribute has three possible values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;inherit&lt;/code&gt;. Specifying inherit will make the element editable if it’s immediate parent is editable.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;editable&amp;quot; contenteditable=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The following directive uses contenteditable attribute and ng-model for data binding.&lt;/p&gt;
&lt;p data-height=&#34;452&#34; data-theme-id=&#34;8070&#34; data-slug-hash=&#34;mgCAG&#34; data-default-tab=&#34;result&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/gaboesquivel/pen/mgCAG/&#39;&gt;Editing Page Elements with contenteditable&lt;/a&gt; by Gabo Esquivel (&lt;a href=&#39;http://codepen.io/gaboesquivel&#39;&gt;@gaboesquivel&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;
&lt;p&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Overview of Angular Generators – April 2014</title>
      <link>https://gaboesquivel.com/blog/2014/overview-of-angular-generators-april-2014/</link>
      <pubDate>Sat, 19 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://gaboesquivel.com/blog/2014/overview-of-angular-generators-april-2014/</guid>
      <description>&lt;p&gt;This is a short and opinionated review of the AngularJS generators on npm as of April 19th, 2014.&lt;/p&gt;
&lt;p&gt;There are a lot of generators on npm and it&amp;rsquo;s a little hard to decide which one to use or fork, since we don&amp;rsquo;t want to reinvent the wheel. Currently the only way to compare them is to try them one by one and that&amp;rsquo;s a very time consuming task. In this post I&amp;rsquo;ll try to give you an overview of some generators I&amp;rsquo;ve explored recently hoping it will save you some time. I’ll follow &lt;a href=&#34;http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript&#34;&gt;Cliff Meyer&amp;rsquo;s Code Organization Categorization&lt;/a&gt; to describe their code structure.&lt;/p&gt;
&lt;p&gt;Most generators still use the &amp;ldquo;Sock Drawer&amp;rdquo; directory organization, an approach that I personally avoid, it doesn&amp;rsquo;t scale well but it works for small projects. I prefer a modular structure as suggested on latest &lt;a href=&#34;https://docs.google.com/document/d/1XXMvReO8-Awi1EZXAXS4PzDzdNvV6pGcuaF4Q9821Es/pub&#34;&gt;Google&amp;rsquo;s Best Practice Recommendations for Angular App Structure&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some of the benefits of modularization are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encapsulation:&lt;/strong&gt; Code, styles and tests related to specific feature will be contained on the same directory.&lt;br&gt;
&lt;strong&gt;Context:&lt;/strong&gt;  Code lives in given context by feature. This is specially important to developers new to the application, who will find it easier to connect the dots.&lt;br&gt;
&lt;strong&gt;Code Reusabilty:&lt;/strong&gt; You would be able to reuse modules across projects and clients, Eg mobile and web-client could share autentication modules or resources ( models ).&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a list of Angular generators and their characteristics (some of them are fullstack generators):&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
